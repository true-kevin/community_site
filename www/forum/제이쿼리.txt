제이쿼리 기본 문법
$(셀렉터).메소드/프로퍼티/이벤트리스너

$(태그이름)
해당 태그 모두를 셀렉트한다.
예)
$("p").hide(); // 모든 p태그가 display:none이된다.
그냥 자스 코드로 나타내면 아래와 같다.
예)
var p = document.getElementsByTagName('p');
for(x in p)
{
	p[x].style.display = 'none';
}

$(id 명)
해당 id의 엘리먼트 하나를 셀렉트한다.
예)
$("#test").hide();
그냥 자스 코드로 나타내면 아래와 같다.
예)
document.getElementById('test').style.display = 'none';

$(class 명)
해당 class의 엘리먼트 모두를 셀렉트한다.
예)
$(".test").hide();
class명의 셀렉트의 경우는 자스로만 구현하기 까다롭다.
따라서 제이쿼리를 쓰는 이유 중에 하나이기도 하다.

$('*')
모든 엘리먼트를 셀렉트한다.
자스로는 아래와 같이 나타낸다.
예)
document.getElementsByTagName('*');

제이쿼리의 이벤트
$("p").click(function(){$(this).hide();});
각 이벤트 메소드로 핸들링한다.
이벤트명에 'on'이 들어가지 않는다.

$('p').hover(function(){}, function(){});
제이쿼리는 hover 이벤트를 지원한다.
원래는 mouseover, mouseout으로 구현해야한다.
따라서 hover이벤트는 위처럼 두개의 함수를 받는다.

위처럼 익명 함수를 정의해도 되고 함수명을 써줘도 된다.
$('#p1').hover(aa, aa);
function aa(){alert('hi');}

on() 메소드로 한번에 여러 이벤트를 추가할 수도 있다.
$("p").on({
    mouseenter: function(){
        $(this).css("background-color", "lightgray");
    }, 
    mouseleave: function(){
        $(this).css("background-color", "lightblue");
    }, 
    click: function(){
        $(this).css("background-color", "yellow");
    } 
});
근데 이게 가독성은 더 떨어지는 듯하다. 그냥 여려번 써도 됨

제이쿼리 이펙트 메소드들

hide()와 show()
display: none과 block을 해주는 메소드다.
hide("slow"), hide("fast"), hide(1234)//밀리세컨드
위처럼 속도도 조절할 수 있다.

toggle() 메소드
hide()와 show()를 번갈아가며 해주는 것이다.
따로 플래그 변수 설정 안해도 돼서 편하게 쓸 수 있다.
$(document).ready(function(){
    $("button").click(function(){
        $("p").toggle();
    });
});

fade 메소드
문자 그대로 희미해지게 만드는 메소드다.
hide()와 show()와 거의 비슷한 용도로 쓰인다.
fadeOut() 점점 희미해지며 사라진다.
fadeIn() 점점 선명해지면 나타난다.
fadeToggle() 토글로서 페이드 효과를 준다.
역시 slow, fast, 밀리세컨드로 속도 조절이 가능하다.
fadeTo()메소드는 희미해지는 정도를 선택할 수 있다.
0에 가까울 수록 사라지게 된다.
$("#div1").fadeTo("slow", 0.4);

slid 메소드
slideDown()
slideUp()
slideToggle()
위처럼 3가지 있다. 사용법은 위 메소드들과 같다.

animate() 메소드
$("div").animate({
            left: '250px',
            opacity: '0.5',
            top: '200px',
            height: '150px',
            width: '150px'
        });
div가 오른쪽 아래 대각선으로 가면서 커지면서 투명해진다.
뿐만 아니라 모든 CSS를 컨트롤할 수 있다.
단, 카멜 표기법을 쓴다. padding-left가 아니라 paddingLeft다.
또한 위처럼 절대 값이 아닌 상대 값을 줄 수도 있다.
height: '+=150px',
width: '+=150px'

한 개씩 끊어서 동작하게 할 수도 있다.
$("button").click(function(){
		var div = $("div");
		div.animate({height: '300px', opacity: '0.4'}, "slow");
		div.animate({width: '300px', opacity: '0.8'}, "slow");
		div.animate({height: '100px', opacity: '0.4'}, "slow");
		div.animate({width: '100px', opacity: '0.8'}, "slow");
});

위 효과들을 도중에 멈추기 위해 stop()메소드를 쓸 수 있다.
$("#stop").click(function(){
    $("#panel").stop();
});

파라미터에 따른 차이를 알아 보자.
$("#stop").click(function(){
		$("div").stop(); // 현재 동작 중인 것만 정지
});

$("#stop2").click(function(){
		$("div").stop(true); // 모두 정지
});

$("#stop3").click(function(){
		$("div").stop(true, true); // 모두 바로 완료시킴
});

위에 소개한 이펙트 메소드들은 콜백 함수를 가질 수 있다.
효과가 완전히 끝난 후에 콜백함수가 호출된다.
$("p").toggle("slow", function(){
	alert("The paragraph is now hidden");
});
만약 그냥 아래 처럼 한다면
$("p").hide(1000);
alert("The paragraph is now hidden");
알럿이 더 먼저 실행되는 현상을 보게 된다.

제이쿼리 메소드 체이닝
$("#p1").css("color", "red").slideUp(2000).slideDown(2000);
이런식으로 여러 이펙트를 연쇄적으로 줄 수 있다.
앞에 것이 완전히 끝난 후 뒤에 것이 작동된다.

제이쿼리 DOM 접근법
text()와 html()의 차이
<p id="test">This is some <b>bold</b> text in a paragraph.</p>
$("#test").text() // This is some bold text in a paragraph.
$("#test").html() // This is some <b>bold</b> text in a paragraph.

val()
input들의 값을 보여준다.
<input type="text" id="test" value="Mickey Mouse"></p>
$("#test").val()

attr(어트리뷰트명)
<a href="http://www.w3schools.com" id="w3s">W3Schools.com</a>
$("#w3s").attr("href")
값을 바꾸는 것 역시 가능하다.
$("#w3s").attr("href", "http://www.w3schools.com/jquery");

나머지들도 값을 바꿔주는 것이 역시 가능하다.
$("#btn1").click(function(){
		$("#test1").text("<b>Hello world!</b>"); //태그는 이스케이프 된다.
});
$("#btn2").click(function(){
		$("#test2").html("<b>Hello world!</b>"); //태그가 적용된다.
});
$("#btn3").click(function(){
		$("#test3").val("Dolly Duck");
});

제이쿼리의 엘리먼트 추가, 삭제
1. 자식 추가
$("ol").append("<li>Appended item</li>"); // 마지막 자식으로
$("ol").prepend("<li>Prepended item</li>"); // 첫 자식으로
2. 형제 추가
$("img").before("<b>Before</b>"); // 앞에 형제 추가
$("img").after("<i>After</i>"); // 뒤에 형제 추가
3. 자신 삭제
$("#div1").remove();
4. 자손들 삭제(비우기)
$("#div1").empty(); // 텍스트 포함 내부 요소들만 삭제된다.

제이쿼리 클래스 추가, 삭제
1. 클래스 추가
$("div").addClass("important");
$("#div1").addClass("important blue"); // 여러개의 클래스도 줄 수 있다.
2. 클래스 삭제
$("h1, h2, p").removeClass("blue");
3. 클래스 토글로 주기
$("h1, h2, p").toggleClass("blue");

제이쿼리른 style프로퍼티 대신 css메소드를 쓴다.
$("p").css("background-color"); // 배경색을 리턴한다.
$("p").css("background-color", "yellow"); // 배경색을 설정한다.
여러개 동시에도 가능하다.
$("p").css({"background-color": "yellow", "font-size": "200%"})
문법이 좀 다르니 구분해 두도록하자.
여러개 하는 문법은 JSON이다. 따라서 키도 ""(큰따옴표)해준다.

제이쿼리의 width, height
width()
height()
innerWidth() // 패딩 포함
innerHeight() // 패딩 포함
outerWidth() // 보더 포함
outerHeight() // 보더 포함
outerWidth(true) // 마진 포함
outerHeight(true) // 마진 포함

제이쿼리의 parent(), parents(), parentsUntil()의 차이
parent():부모를 셀렉트한다.
parents():모든 조상을 셀렉트한다.
parents('ul'):모든 조상 중에 ul을 셀렉트한다.
범위로 가지고 올 수도 있따.
$("span").parentsUntil("div"): <span>과 <div>사이의 조상들만 셀렉트한다.

제이쿼리의 children(), find()의 차이
children(): 직계 자식들만 셀렉트한다.
children('p'): 직계 자식 주에 <p>만 셀렉트한다.
자손에서 셀렉트할 때
$("div").find("span"): 모든 자손 중에 <span>들만 셀렉트한다.
$("div").find("*"): 모든 자손을 셀렉트한다.

제이쿼리의 형제
siblings(): 모든 형제들 셀렉트
next(): 바로 다음 형제 셀렉트
nextAll(): 바로 다음 모든 형제들 셀렉트
$("h2").nextUntil("h6"): h2와 h6사이의 형제들만 셀렉트
prev(): 바로 이전 형제 셀렉트
prevAll(): 바로 이전의 모든 형제들 셀렉트
$("h2").prevUntil("h6"): h6과 h2 사이의 모든 형제들 셀렉트

제이쿼리르 first()와 last()
$("div p").first(): 해당 셀렉터의 엘리먼트 중 첫번 째 하나 셀렉트
$("div p").last(): 해당 셀렉터의 엘리먼트 중 마지막 하나 셀렉트
자식들을 셀렉트하는 것이 아니다.
$("p").eq(3): 해당 셀렉터의 엘리먼트 중 4번 째 것 셀렉트
//eq의 인덱스는 0부터 시작한다.
$("p").not(".intro"): 해당 셀렉터 중 클래스가 intro가 아닌것들만 셀렉트

















